Index: cmake/LighttpdMacros.cmake
===================================================================
--- cmake/LighttpdMacros.cmake	(revision 2724)
+++ cmake/LighttpdMacros.cmake	(working copy)
@@ -9,7 +9,7 @@
     SET(L_INSTALL_TARGETS ${L_INSTALL_TARGETS} ${LIBNAME})
     ## Windows likes to link it this way back to app!
     IF(WIN32)
-        SET_TARGET_PROPERTIES(${LIBNAME} PROPERTIES LINK_FLAGS lighttpd.lib)
+      TARGET_LINK_LIBRARIES(${LIBNAME} lighttpd)
     ENDIF(WIN32)
 
     IF(APPLE)
Index: src/splaytree.h
===================================================================
--- src/splaytree.h	(revision 2724)
+++ src/splaytree.h	(working copy)
@@ -1,6 +1,8 @@
 #ifndef _SPLAY_TREE_H_
 #define _SPLAY_TREE_H_
 
+#include "base.h"
+
 typedef struct tree_node {
     struct tree_node * left, * right;
     int key;
Index: src/sys-socket.h
===================================================================
--- src/sys-socket.h	(revision 2724)
+++ src/sys-socket.h	(working copy)
@@ -10,6 +10,10 @@
 /* By default this is 64 */
 #define FD_SETSIZE 4096
 #endif
+#ifndef WINVER
+  #define WINVER 0x0501
+#endif
+#include <windows.h>
 #include <winsock2.h>
 #include <ws2tcpip.h>
 //#include <wspiapi.h>
Index: src/plugin.c
===================================================================
--- src/plugin.c	(revision 2724)
+++ src/plugin.c	(working copy)
@@ -69,9 +69,11 @@
 
 	array_free(p->required_plugins);
 
+#ifndef _WIN32
 	/* if we are running under valgrind, 
 	 * don't unload the plugins to keep the symbols intact */
 	if (RUNNING_ON_VALGRIND) use_dlclose = 0;
+#endif
 
 #ifndef LIGHTTPD_STATIC
 	if (use_dlclose && p->lib) {
Index: src/plugin.h
===================================================================
--- src/plugin.h	(revision 2724)
+++ src/plugin.h	(working copy)
@@ -1,6 +1,13 @@
 #ifndef _PLUGIN_H_
 #define _PLUGIN_H_
 
+#ifdef _WIN32
+/* for getaddrinfo */
+#ifndef WINVER
+  #define WINVER WindowsXP
+#endif
+#endif
+
 #include "settings.h"
 #include "base.h"
 #include "buffer.h"
Index: src/CMakeLists.txt
===================================================================
--- src/CMakeLists.txt	(revision 2724)
+++ src/CMakeLists.txt	(working copy)
@@ -284,11 +284,11 @@
 ENDIF(HAVE_SYS_INOTIFY_H)
 
 IF(WITH_ZLIB)
-  IF(NOT WIN32)
+  IF(NOT WIN32 OR MINGW)
     CHECK_INCLUDE_FILES(zlib.h HAVE_ZLIB_H)
     CHECK_LIBRARY_EXISTS(z deflate "" HAVE_LIBZ)
 		SET(ZLIB_LIBRARY z)
-  ELSE(NOT WIN32)
+  ELSE(NOT WIN32 OR MINGW)
     FIND_PATH(ZLIB_INCLUDE_DIR zlib.h
     /usr/local/include
     /usr/include
@@ -312,7 +312,7 @@
       INCLUDE_DIRECTORIES(${ZLIB_INCLUDE_DIR})
   
     ENDIF(ZLIB_INCLUDE_DIR AND ZLIB_LIBRARY)
-  ENDIF(NOT WIN32)
+  ENDIF(NOT WIN32 OR MINGW)
 ENDIF(WITH_ZLIB)
 
 IF(WITH_LUA)
@@ -323,6 +323,15 @@
   IF(NOT LUA_LDFLAGS)
     PKGCONFIG(lua-5.1 LUA_INCDIR LUA_LIBDIR LUA_LDFLAGS LUA_CFLAGS)
   ENDIF(NOT LUA_LDFLAGS)
+  IF (NOT LUA_LDFLAGS)
+    FIND_PACKAGE(Lua51 REQUIRED)
+    SET(LUA_INCDIR ${LUA_INCLUDE_DIR})
+    GET_FILENAME_COMPONENT(LUA_LIBDIR ${LUA_LIBRARIES} PATH)
+    IF(WIN32)
+      SET(LUA_CFLAGS "-DLUA_BUILD_AS_DLL")
+    ENDIF(WIN32)
+    SET(LUA_LDFLAGS "-llua5.1")
+  ENDIF(NOT LUA_LDFLAGS)
   MESSAGE(STATUS "found lua at: INCDIR: ${LUA_INCDIR} LIBDIR: ${LUA_LIBDIR} LDFLAGS: ${LUA_LDFLAGS} CFLAGS: ${LUA_CFLAGS}")
   IF(LUA_LDFLAGS)
     SET(HAVE_LIBLUA 1 "Have liblua")
@@ -491,7 +500,11 @@
 IF(HAVE_LIBFCGI)
   ADD_EXECUTABLE(fcgi-stat-accel fcgi-stat-accel.c)
   TARGET_LINK_LIBRARIES(fcgi-stat-accel fcgi)
-  SET_TARGET_PROPERTIES(fcgi-stat-accel PROPERTIES LINK_FLAGS "-pthread")
+  IF(WIN32)
+    TARGET_LINK_LIBRARIES(fcgi-stat-accel pthread)
+  ELSE(WIN32)
+    SET_TARGET_PROPERTIES(fcgi-stat-accel PROPERTIES LINK_FLAGS "-pthread")  
+  ENDIF(WIN32)
   SET(L_INSTALL_TARGETS ${L_INSTALL_TARGETS} fcgi-stat-accel)
 ENDIF(HAVE_LIBFCGI)
 
@@ -505,9 +518,9 @@
 	request.c
 	response.c
 	${COMMON_SRC})
+SET_TARGET_PROPERTIES(lighttpd PROPERTIES ENABLE_EXPORTS ON)	
 SET(L_INSTALL_TARGETS ${L_INSTALL_TARGETS} lighttpd)
 
-
 ADD_AND_INSTALL_LIBRARY(mod_access mod_access.c)
 ADD_AND_INSTALL_LIBRARY(mod_alias mod_alias.c)
 ADD_AND_INSTALL_LIBRARY(mod_dirlisting mod_dirlisting.c)
@@ -560,7 +573,7 @@
   TARGET_LINK_LIBRARIES(mod_proxy_core ${PCRE_LIBRARY})
 ENDIF(HAVE_PCRE_H)
 
-ADD_TARGET_PROPERTIES(mod_magnet LINK_FLAGS "${LUA_LDFLAGS}")
+TARGET_LINK_LIBRARIES(mod_magnet ${LUA_LDFLAGS})
 ADD_TARGET_PROPERTIES(mod_magnet COMPILE_FLAGS "${LUA_CFLAGS}")
 
 IF(HAVE_MYSQL_H AND HAVE_LIBMYSQL)
@@ -609,14 +622,14 @@
 ENDIF(HAVE_ZLIB_H)
 
 IF(CMAKE_COMPILER_IS_GNUCC)
-  SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=gnu99 -Wall -g -Wshadow -W -pedantic ${WARN_FLAGS}")
+  SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=gnu99 -Wall -g -W -pedantic ${WARN_FLAGS}")
   SET(CMAKE_C_FLAGS_RELEASE        "${CMAKE_C_FLAGS_RELEASE}     -O2")
   SET(CMAKE_C_FLAGS_DEBUG          "${CMAKE_C_FLAGS_DEBUG}       -O0")
   SET(CMAKE_C_FLAGS_RELWITHDEBINFO "${CMAKE_C_FLAGS_WITHDEBINFO} -O2")
   ADD_DEFINITIONS(-D_GNU_SOURCE)
 ENDIF(CMAKE_COMPILER_IS_GNUCC)
 
-ADD_TARGET_PROPERTIES(lighttpd LINK_FLAGS "-export-dynamic ${GTHREAD_LDFLAGS} ${XML2_LDFLAGS}")
+ADD_TARGET_PROPERTIES(lighttpd LINK_FLAGS "${GTHREAD_LDFLAGS} ${XML2_LDFLAGS}")
 IF(CMAKE_SYSTEM MATCHES "Linux")
   ## on linux we need pthread and librt for posix-aio
   ADD_TARGET_PROPERTIES(lighttpd LINK_FLAGS "-lrt")
@@ -640,7 +653,6 @@
   ENDIF(WITH_GLIB)
 
   IF(MINGW)
-    TARGET_LINK_LIBRARIES(lighttpd msvcr70)
     ADD_TARGET_PROPERTIES(lighttpd LINK_FLAGS "-Wl,-subsystem,console")
   ENDIF(MINGW)
 ENDIF(WIN32)
Index: src/server.c
===================================================================
--- src/server.c	(revision 2724)
+++ src/server.c	(working copy)
@@ -107,8 +107,10 @@
 static volatile sig_atomic_t graceful_restart = 0;
 static volatile sig_atomic_t handle_sig_alarm = 1;
 static volatile sig_atomic_t handle_sig_hup = 0;
+#if defined(HAVE_SIGACTION) && defined(SA_SIGINFO)
 static volatile siginfo_t last_sigterm_info;
 static volatile siginfo_t last_sighup_info;
+#endif
 
 #if defined(HAVE_SIGACTION) && defined(SA_SIGINFO)
 static void sigaction_handler(int sig, siginfo_t *si, void *context) {
@@ -609,9 +611,13 @@
 
 				return -1;
 			} else {
+#if defined(HAVE_SIGACTION) && defined(SA_SIGINFO)			
 				TRACE("logfiles cycled by UID=%d, PID=%d", 
 						last_sighup_info.si_uid, 
 						last_sighup_info.si_pid);
+#else
+				TRACE("logfiles cycled", 0, 0);
+#endif
 			}
 #endif
 		}
@@ -810,7 +816,11 @@
 				}
 
 				if (graceful_shutdown) {
+#if defined(HAVE_SIGACTION) && defined(SA_SIGINFO)
 					TRACE("[note] graceful shutdown started by UID=%d, PID=%d", last_sigterm_info.si_uid, last_sigterm_info.si_pid);
+#else
+					TRACE("[note] graceful shutdown started", 0, 0);
+#endif
 				} else if (srv->fdwaitqueue->used) {
 					TRACE("[note] out of FDs, server-socket get disabled for a while, we have %zu connections open and they are waiting for %zu FDs",
 					    srv->conns->used, srv->fdwaitqueue->used);
@@ -1207,8 +1217,10 @@
 		struct passwd *pwd = NULL;
 		int use_rlimit = 1;
 
+#ifndef _WIN32
 		/* valgrind only supports 1024 fds */
 		if (RUNNING_ON_VALGRIND) use_rlimit = 0;
+#endif
 
 #ifdef HAVE_GETRLIMIT
 		if (0 != getrlimit(RLIMIT_NOFILE, &rlim)) {
@@ -1775,7 +1787,11 @@
 	plugins_free(srv);
 	server_free(srv);
 
+#if defined(HAVE_SIGACTION) && defined(SA_SIGINFO)
 	TRACE("server stopped by UID=%d, PID=%d", last_sigterm_info.si_uid, last_sigterm_info.si_pid);
+#else
+	TRACE("server stopped", 0, 0);
+#endif
 
 	log_free();
 	status_counter_free();
Index: src/mod_magnet.c
===================================================================
--- src/mod_magnet.c	(revision 2724)
+++ src/mod_magnet.c	(working copy)
@@ -25,6 +25,12 @@
 #include <lua.h>
 #include <lauxlib.h>
 
+#ifdef WIN32
+#define S_IFLNK    0120000 /* Symbolic link */
+#define S_ISLNK(x) (((x) & S_IFMT) == S_IFLNK)
+#define S_ISSOCK(x) 0
+#endif
+
 #define PLUGIN_NAME "magnet"
 
 #define MAGNET_CONFIG_RAW_URL        PLUGIN_NAME ".attract-raw-url-to"
